/*Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
      public List<Integer> preorderTraversal(TreeNode root) {
          ArrayList<Integer> result = new ArrayList<Integer>();
          if (root!=null){
    	ArrayList<TreeNode> treeNodeArray = new ArrayList<TreeNode>();
    	treeNodeArray.add(root);
    	while (treeNodeArray.size()!=0){
    		TreeNode tempTreeNode = treeNodeArray.get(0);
    		result.add(tempTreeNode.val);
    		treeNodeArray.remove(0);
    		if (tempTreeNode.right!=null){
    		    treeNodeArray.add(0, tempTreeNode.right);
    		}
    		if (tempTreeNode.left!=null){
    			treeNodeArray.add(0, tempTreeNode.left);
    		}
    	}
		}
		return result;
        
    }
}
